/**
 *  Copyright (c) 2012, 2014 Sme.UP and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 * 
 * Contributors: 
 *   Mattia Rocchi - Initial API and implementation 
 */
package org.asup.db.core.base;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class BaseNativeStatementImpl extends BaseStatementImpl {

	protected BaseNativeStatementImpl(Statement statement) {
		super(statement, null, null);
	}
	
	@Override
	public void close() throws SQLException {
		rawStatement.close();
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return rawStatement.execute(sql);
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return rawStatement.executeQuery(sql);
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return rawStatement.executeUpdate(sql);
	}

	public void addBatch(String sql) throws SQLException {
		rawStatement.addBatch(sql);
	}

	public void cancel() throws SQLException {
		rawStatement.cancel();
	}

	public void clearBatch() throws SQLException {
		rawStatement.clearBatch();
	}

	public void clearWarnings() throws SQLException {
		rawStatement.clearWarnings();
	}

	public void closeOnCompletion() throws SQLException {
		rawStatement.closeOnCompletion();
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return rawStatement.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return rawStatement.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return rawStatement.execute(sql, columnNames);
	}

	public int[] executeBatch() throws SQLException {
		return rawStatement.executeBatch();
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return rawStatement.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return rawStatement.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return rawStatement.executeUpdate(sql, columnNames);
	}

	public Connection getConnection() throws SQLException {
		return rawStatement.getConnection();
	}

	public int getFetchDirection() throws SQLException {
		return rawStatement.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return rawStatement.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return rawStatement.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException {
		return rawStatement.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return rawStatement.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException {
		return rawStatement.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return rawStatement.getMoreResults(current);
	}

	public int getQueryTimeout() throws SQLException {
		return rawStatement.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return rawStatement.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		return rawStatement.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return rawStatement.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return rawStatement.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return rawStatement.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return rawStatement.getWarnings();
	}

	public boolean isCloseOnCompletion() throws SQLException {
		return rawStatement.isCloseOnCompletion();
	}

	public boolean isClosed() throws SQLException {
		return rawStatement.isClosed();
	}

	public boolean isPoolable() throws SQLException {
		return rawStatement.isPoolable();
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return rawStatement.isWrapperFor(iface);
	}

	public void setCursorName(String name) throws SQLException {
		rawStatement.setCursorName(name);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		rawStatement.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		rawStatement.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		rawStatement.setFetchSize(rows);
	}

	public void setMaxFieldSize(int max) throws SQLException {
		rawStatement.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		rawStatement.setMaxRows(max);
	}

	public void setPoolable(boolean poolable) throws SQLException {
		rawStatement.setPoolable(poolable);
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		rawStatement.setQueryTimeout(seconds);
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		return rawStatement.unwrap(iface);
	}

}
